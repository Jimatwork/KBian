package com.kubian.mode.dao;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.kubian.mode.ColumnContent;

@Transactional
@Repository
public interface ColumnContentDao extends CrudRepository<ColumnContent, Integer> {
	public List<ColumnContent> findAll();

	public Page<ColumnContent> findAll(Pageable pageable);

	// 根据colId分页查询头条的所有信息
	@Query("from ColumnContent where (state = 1 or state=:tag) and colId =:colId order by id DESC")
	public List<ColumnContent> findByColId(@Param("colId") Long colId, @Param("tag") String tag, Pageable pageable);

	// 根据栏目colId查询所有
	@Query("from ColumnContent where (state = 1 or state=:tag) and colId =:colId order by id DESC")
	public List<ColumnContent> findByColId(@Param("colId") Long colId, @Param("tag") String tag);

	// 根据用户appUserId 或 标题conTitle 模糊查询
	@Query(nativeQuery = true, value = "select * from column_content where app_user_id in (select a.id from app_user a  where user_name like :search_str) or con_title like :search_str and (is_public is null or is_public!=0) and col_id =:colId and (state =1 or state=:tag) order by id DESC limit :page,:size")
	public List<ColumnContent> getColumnContentByAppUserIdOrConTitle(@Param("search_str") String search_str,
			@Param("page") Integer page, @Param("size") Integer size, @Param("colId") Long colId,
			@Param("tag") String tag);

	// 获取模糊查询的总数
	@Query(nativeQuery = true, value = "select * from column_content where app_user_id in (select a.id from app_user a  where user_name like :search_str) or con_title like :search_str and (is_public is null or is_public!=0) and col_id =:colId and (state = 1 or state=:tag) order by id DESC")
	public List<ColumnContent> getColumnContentAll(@Param("search_str") String search_str, @Param("tag") String tag,
			@Param("colId") Long colId);

	// 根据id查询对应信息
	public ColumnContent findById(Long id);

	// 根据colid获取头条顶部展示的内容
	@Query("from ColumnContent where colId = :colId and hot = :hot and (state = 1 or state = :tag)")
	public List<ColumnContent> findByColIdAndHot(@Param("colId") Long colId, @Param("hot") String hot,
			@Param("tag") String tag);

	// 分页获取获取当前登录用户发布的内容列表
	public List<ColumnContent> findByAppUserIdAndColId(Long appUserId, Long colId, Pageable pageable);

	public List<ColumnContent> findByAppUserId(Long appUserId, Pageable pageable);

	public List<ColumnContent> findByAppUserId(Long appUserId);

	public List<ColumnContent> findByAppUserIdAndColId(Long appUserId, Long colId);

	// 分页获取发现栏目的内容
	@Query("from ColumnContent where (state =2 or state = :tag) and colId =:colId order by id DESC")
	public List<ColumnContent> getFindManagers(@Param("colId") Long colId, @Param("tag") String tag, Pageable pageable);

	@Query("from ColumnContent where (state =2 or state = :tag) and colId =:colId order by id DESC")
	public List<ColumnContent> getFindManagers(@Param("colId") Long colId, @Param("tag") String tag);

	// 根据用户appUserId 或 标题conTitle 模糊查询
	@Query(nativeQuery = true, value = "select * from column_content where app_user_id in (select a.id from app_user a  where user_name like :search_str) or con_title like :search_str and (is_public is null or is_public!=0) and col_id =:colId and (state =2 or state = :tag) order by id DESC limit :page,:size")
	public List<ColumnContent> getFindColumnContent(@Param("search_str") String search_str, @Param("page") Integer page,
			@Param("size") Integer size, @Param("colId") Long colId, @Param("tag") String tag);

	// 获取模糊查询的总数
	@Query(nativeQuery = true, value = "select * from column_content where app_user_id in (select a.id from app_user a  where user_name like :search_str) or con_title like :search_str and (is_public is null or is_public!=0) and col_id =:colId and (state =2 or state = :tag) order by id DESC")
	public List<ColumnContent> getFindColumnContentAll(@Param("search_str") String search_str,
			@Param("colId") Long colId, @Param("tag") String tag);

	// 根据colid获取发现栏目顶部展示的内容
	@Query("from ColumnContent where colId = :colId and hot = :hot and (state =2 or state = :tag)")
	public List<ColumnContent> getFindTopContent(@Param("colId") Long colId, @Param("hot") String hot,
			@Param("tag") String tag);

	// 分页获取热门栏目的内容
	@Query("from ColumnContent where (state =2 or state = 1 or state = :tag1 or state = :tag2) and colId =:colId order by playCount DESC")
	public List<ColumnContent> getHotContent(@Param("colId") Long colId, @Param("tag1") String tag1,
			@Param("tag2") String tag2, Pageable pageable);

	@Query("from ColumnContent where (state =2 or state = 1 or state = :tag1 or state = :tag2) and colId =:colId order by playCount DESC")
	public List<ColumnContent> getHotContent(@Param("colId") Long colId, @Param("tag1") String tag1,
			@Param("tag2") String tag2);

	// 根据colid获取热门栏目顶部展示的内容
	@Query("from ColumnContent where colId = :colId and hot = :hot and (state =2 or state = 1 or state = :tag1 or state = :tag2)")
	public List<ColumnContent> getTopHotContent(@Param("colId") Long colId, @Param("hot") String hot,
			@Param("tag1") String tag1, @Param("tag2") String tag2);

	// 根据用户id获取收藏的内容的信息
	@Query(nativeQuery = true, value = "select * from column_content where id in  (select column_content_id from collect where app_user_id = :appUserId) order by id DESC limit :page,:size")
	public List<ColumnContent> getColContentbyCollect(@Param("appUserId") Long appUserId, @Param("page") Integer page,
			@Param("size") Integer size);

	// 根据appUserId 获取内容
	// @Query("from ColumnContent where appUserId = :appUserId order by id DESC
	// limit :pagr,:size")
	// public List<ColumnContent> findByAppUserIdAndColId(Long appUserId, Long
	// colId, Pageable pageable);

	// 根据userId 获取内容
	public List<ColumnContent> findByUserId(Long userId, Pageable pageable);

	// 根据用户id获取关注的app用户的发布的内容
	@Query(nativeQuery = true, value = "select * from column_content where app_user_id in (select be_followed_id from attention where follower_id = :appUserId and judge=:judge) order by id DESC limit :page,:size")
	public List<ColumnContent> getConByAttention(@Param("appUserId") Long appUserId, @Param("judge") Integer judge,
			@Param("page") Integer page, @Param("size") Integer size);

	@Query(nativeQuery = true, value = "select count(1) from column_content where app_user_id in (select be_followed_id from attention where follower_id = :appUserId and judge=:judge) order by id DESC")
	public Integer getConByAttentions(@Param("appUserId") Long appUserId, @Param("judge") Integer judge);

	// 根据用户id获取关注的后台用户的发布的内容
	@Query(nativeQuery = true, value = "select * from column_content where user_id in (select be_followed_id from attention where follower_id = :appUserId and judge=:judge) order by id DESC limit :page,:size")
	public List<ColumnContent> getConByAttention2(@Param("appUserId") Long appUserId, @Param("judge") Integer judge,
			@Param("page") Integer page, @Param("size") Integer size);

	@Query(nativeQuery = true, value = "select count(1) from column_content where user_id in (select be_followed_id from attention where follower_id = :appUserId and judge=:judge) order by id DESC")
	public Integer getConByAttentions2(@Param("appUserId") Long appUserId, @Param("judge") Integer judge);

	// 根据用户appUserId 或 标题conTitle 模糊查询
	@Query(nativeQuery = true, value = "select * from column_content where user_id in (select u.id from user u  where nick_name like :search_str) or app_user_id in (select a.id from app_user a  where user_name like :search_str) or con_title like :search_str and (is_public is null or is_public!=0) and (state =2 or state = 1 or state = :tag1 or state = :tag2)  order by id DESC limit :page,:size")
	public List<ColumnContent> fuzzySearchCon(@Param("search_str") String search_str, @Param("page") Integer page,
			@Param("size") Integer size, @Param("tag1") String tag1, @Param("tag2") String tag2);

	@Query(nativeQuery = true, value = "select * from column_content where user_id in (select u.id from user u  where nick_name like :search_str) or app_user_id in (select a.id from app_user a  where user_name like :search_str) or con_title like :search_str and (is_public is null or is_public!=0) and (state =2 or state = 1 or state = :tag1 or state = :tag2)  order by id DESC")
	public List<ColumnContent> fuzzySearchCon(@Param("search_str") String search_str, @Param("tag1") String tag1,
			@Param("tag2") String tag2);
}
